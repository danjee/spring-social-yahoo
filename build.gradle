/*
 * Copyright 2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

apply plugin: 'java'
apply from: "${rootProject.projectDir}/publish-maven.gradle"

group = 'org.springframework.social'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile "org.apache.commons:commons-lang3:$commonsLangVersion"
    compile "org.springframework.social:spring-social-core:$springSocialVersion"
    compile "com.google.guava:guava:$googleGuavaVersion"

    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"

    testCompile "junit:junit:$junitVersion"
    testCompile "pl.pragmatists:JUnitParams:$junitParamsVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.hamcrest:hamcrest-all:$hamcrestVersion"
}

configure(allprojects) {

    jar {
        manifest.attributes['Implementation-Title'] = rootProject.name
        manifest.attributes['Implementation-Version'] = rootProject.version

        from("${rootProject.projectDir}") {
            include "LICENSE"
            into "META-INF"
            expand(yyyy: new Date().format('yyyy'), owner: "Gabriel Ruiu")
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

